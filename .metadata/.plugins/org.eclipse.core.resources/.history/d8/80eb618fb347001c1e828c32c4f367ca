package kr.ac.hansung.cse.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import kr.ac.hansung.cse.model.Course;

@Repository("courseDao")
public class CourseDao {
	// JDBC Template을 생성하고 이용하기

	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	public void setDataSource(DataSource dataSource) {
		this.jdbcTemplate = new JdbcTemplate(dataSource);
	}
	
	public int getRowCount() {
		String sqlStatement = "select count(*) from courses";
		return jdbcTemplate.queryForObject(sqlStatement, Integer.class);
	}
	
	// for GROUP BY : get year, semester
	public HashMap<Integer, Integer> getGroups(){
		HashMap<Integer, Integer> group = new HashMap<Integer, Integer>();
		String sqlStatement = "select year, semester from courses group by year, semester";
		
		jdbcTemplate.queryForObject(sqlStatement, new RowMapper<Course>() {
			
		});
		
		return group;
	}
	
	// CRUD method : Read
	// query and return a single object
	public Course getCourse(int year, int semester) {
		String sqlStatement = "select * from courses where year=? and semester=?";
		return jdbcTemplate.queryForObject(sqlStatement, new RowMapper<Course>() {

			@Override
			public Course mapRow(ResultSet rs, int rowNum) throws SQLException {
				Course course = new Course();
				course.setId(rs.getInt("id"));
				course.setYear(rs.getInt("year"));
				course.setSemester(rs.getInt("semester"));
				course.setCode(rs.getString("code"));
				course.setName(rs.getString("name"));
				course.setProfessor(rs.getString("professor"));
				course.setType(rs.getString("type"));
				course.setCredit(rs.getInt("credit"));
				return course;
			}
			
		}, new Object[]{year, semester});
	}
	
	// query and return a multiple object
	public List<Course> getCourses() {
		String sqlStatement = "select * from courses";
		return jdbcTemplate.query(sqlStatement, new RowMapper<Course>() {

			@Override
			public Course mapRow(ResultSet rs, int rowNum) throws SQLException {
				Course course = new Course();
				course.setId(rs.getInt("id"));
				course.setYear(rs.getInt("year"));
				course.setSemester(rs.getInt("semester"));
				course.setCode(rs.getString("code"));
				course.setName(rs.getString("name"));
				course.setProfessor(rs.getString("professor"));
				course.setType(rs.getString("type"));
				course.setCredit(rs.getInt("credit"));
				return course;
			}
				
		});
	}
	
	// CRUD method : Create
	public boolean insert(Course course) {
		int year = course.getYear();
		int semester = course.getSemester();
		String name = course.getName();
		String type = course.getType();
		String professor = course.getProfessor();
		int credit = course.getCredit();
		
		String sqlStatement
			= "insert into courses (year, semester, name, type, professor, credit) value (?,?,?,?,?,?)";
		
		return (jdbcTemplate.update(sqlStatement,
				new Object[] {year, semester, name, type, professor, credit}) == 1);
	}
	
	// CRUD method : Update
	public boolean update(Course course) {
		int id = course.getId();
		int year = course.getYear();
		int semester = course.getSemester();
		String name = course.getName();
		String type = course.getType();
		String professor = course.getProfessor();
		int credit = course.getCredit();
		
		String sqlStatement
			= "update courses set year=?, semester=?, name=?, type=?, professor=?, credit=? where id=?";
		
		return (jdbcTemplate.update(sqlStatement,
				new Object[] {year, semester, name, type, professor, credit, id}) == 1);
	}
	
	// CRUD method : Delete
	public boolean delete(int id) {
		String sqlStatement = "delete from courses where id=?";
		return (jdbcTemplate.update(sqlStatement, new Object[] {id}) == 1);
	}
}
